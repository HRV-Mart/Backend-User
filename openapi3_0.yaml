openapi: 3.0.3
info:
  title: Backend User
  description: |-
    This is User micorservice for backend of **HRV-Mart**. This API will contains operations related to User and have its own database. For more information, visit 
  contact:
    email: harshverma3305@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.0.1
servers:
  - url: http://localhost:8080
tags:
  - name: user
    description: Operations about user
    externalDocs:
      description: Find out more
      url: https://github.com/HRV-Mart/Backend-User/issues/5
paths:
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This operation is not meant to be expose publicly.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema: 
                $ref: '#/components/schemas/User'
        500:
          description: Something went wrong.
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
  /user/{userId}:
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - name: userId
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: userId
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        default:
          description: User deleted successfully
        '404':
          description: User not found
components:
  schemas:
    User:
      type: object
      properties:
        emailId:
          type: string
          example: test@test.com
          description: This will be use as userId.
        name:
          type: string
          example: Test User
      xml:
        name: user